name: SEO Agent (check → redeploy → ping)

on:
  push:
    branches: [ main, master ]
  schedule:
    - cron: "0 0 * * *"   # 매일 00:00 UTC (KST 09:00)
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: seo-agent
  cancel-in-progress: false

jobs:
  guard:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    env:
      SITE_BASE: ${{ secrets.SITE_BASE }}
      SITEMAP_PATH: ${{ secrets.SITEMAP_PATH }}
      DEPLOY_HOOK_URL: ${{ secrets.DEPLOY_HOOK_URL }}

    steps:
      - name: Validate secrets
        run: |
          set -e
          : "${SITE_BASE:?Set SITE_BASE in repo secrets}"
          echo "SITEMAP_PATH=${SITEMAP_PATH:-/sitemap.xml}" >> $GITHUB_ENV

      - name: Check headers (status & content-type)
        run: |
          URL="${SITE_BASE}${SITEMAP_PATH:-/sitemap.xml}"
          echo "URL=$URL"
          HEADERS=$(curl -sSIL "$URL")   # -L: 리다이렉트 따라가며 모든 응답 헤더 출력
          echo "$HEADERS" > /tmp/headers.txt

          # 마지막(최종) HTTP 상태코드만 추출
          STATUS=$(awk '/^HTTP/{code=$2} END{print code}' /tmp/headers.txt)

          # 마지막(최종) Content-Type만 추출(소문자)
          CT=$(awk 'tolower($0) ~ /^content-type:/{line=$0} END{print line}' /tmp/headers.txt | awk -F': ' '{print tolower($2)}')

          echo "status=$STATUS"
          echo "content-type=$CT"

          case "$STATUS" in
            2*) : ;;  # 최종이 2xx면 OK
            *) echo "Non-2xx status: $STATUS"; exit 2 ;;
          esac

          if echo "$CT" | grep -qi 'application/x-gzip'; then
            echo "IS_GZ=true" >> $GITHUB_ENV
          elif echo "$CT" | grep -Eqi 'application/xml|text/xml'; then
            echo "IS_GZ=false" >> $GITHUB_ENV
          else
            echo "Unexpected Content-Type: $CT"; exit 3
          fi

      - name: Ensure body has no <script> (non-gzip)
        if: env.IS_GZ != 'true'
        run: |
          URL="${SITE_BASE}${SITEMAP_PATH:-/sitemap.xml}"
          BODY=$(curl -sS "$URL")
          if echo "$BODY" | grep -qi '<script'; then
            echo 'Found <script> in sitemap'; exit 4
          fi
          echo '✅ Body clean'

      - name: Ping Google
        run: |
          URL="${SITE_BASE}${SITEMAP_PATH:-/sitemap.xml}"
          ENCODED=$(python3 -c "import urllib.parse;print(urllib.parse.quote('''${URL}''', safe=''))")
          PING="https://www.google.com/ping?sitemap=${ENCODED}"
          echo "Ping => $PING"
          curl -sS "$PING" >/dev/null || true
          echo '✅ Ping sent'

      - name: Redeploy via hook (on failure)
        if: failure() && env.DEPLOY_HOOK_URL != ''
        run: |
          curl -sS -X POST "$DEPLOY_HOOK_URL" || true
